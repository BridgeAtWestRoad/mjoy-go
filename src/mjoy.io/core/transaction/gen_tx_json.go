////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018 The mjoy-go Authors.
//
// The mjoy-go is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// @File: gen_tx_json.go
// @Date: 2018/05/08 15:18:08
////////////////////////////////////////////////////////////////////////////////

// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package transaction

import (
	//"encoding/json"
	//"errors"
	//"math/big"

	//"mjoy.io/common/types/util/hex"
	//"mjoy.io/common/types"
)


func (t Txdata) MarshalJSON() ([]byte, error) {

	return nil , nil
	//
	//type txdata struct {
	//	AccountNonce hex.Uint64     `json:"nonce"    gencodec:"required"`
	//	Recipient    *types.Address `json:"to"       msgp:"nil"`
	//	Amount       *hex.Big       `json:"value"    gencodec:"required"`
	//	Payload      hex.Bytes      `json:"input"    gencodec:"required"`
	//	V            *hex.Big       `json:"v" gencodec:"required"`
	//	R            *hex.Big       `json:"r" gencodec:"required"`
	//	S            *hex.Big       `json:"s" gencodec:"required"`
	//	Hash         *types.Hash    `json:"hash" msgp:"-"`
	//}
	//var enc txdata
	//enc.AccountNonce = hex.Uint64(t.AccountNonce)
	//enc.Recipient = t.Recipient
	//enc.Amount = (*hex.Big)(&t.Amount.IntVal)
	//enc.Payload = t.Payload
	//enc.V = (*hex.Big)(&t.V.IntVal)
	//enc.R = (*hex.Big)(&t.R.IntVal)
	//enc.S = (*hex.Big)(&t.S.IntVal)
	//enc.Hash = t.Hash
	//return json.Marshal(&enc)
}

func (t *Txdata) UnmarshalJSON(input []byte) error {
	return nil

	//type txdata struct {
	//	AccountNonce *hex.Uint64    `json:"nonce"    gencodec:"required"`
	//	Recipient    *types.Address `json:"to"       msgp:"nil"`
	//	Amount       *hex.Big       `json:"value"    gencodec:"required"`
	//	Payload      *hex.Bytes     `json:"input"    gencodec:"required"`
	//	V            *hex.Big       `json:"v" gencodec:"required"`
	//	R            *hex.Big       `json:"r" gencodec:"required"`
	//	S            *hex.Big       `json:"s" gencodec:"required"`
	//	Hash         *types.Hash    `json:"hash" msgp:"-"`
	//}
	//var dec txdata
	//if err := json.Unmarshal(input, &dec); err != nil {
	//	return err
	//}
	//if dec.AccountNonce == nil {
	//	return errors.New("missing required field 'nonce' for txdata")
	//}
	//t.AccountNonce = uint64(*dec.AccountNonce)
	//if dec.Recipient != nil {
	//	t.Recipient = dec.Recipient
	//}
	//if dec.Amount == nil {
	//	return errors.New("missing required field 'value' for txdata")
	//}
	//t.Amount = &types.BigInt{(big.Int)(*dec.Amount)}
	//if dec.Payload == nil {
	//	return errors.New("missing required field 'input' for txdata")
	//}
	//t.Payload = *dec.Payload
	//if dec.V == nil {
	//	return errors.New("missing required field 'v' for txdata")
	//}
	//t.V = &types.BigInt{(big.Int)(*dec.V)}
	//if dec.R == nil {
	//	return errors.New("missing required field 'r' for txdata")
	//}
	//t.R = &types.BigInt{(big.Int)(*dec.R)}
	//if dec.S == nil {
	//	return errors.New("missing required field 's' for txdata")
	//}
	//t.S = &types.BigInt{(big.Int)(*dec.S)}
	//if dec.Hash != nil {
	//	t.Hash = dec.Hash
	//}
	//return nil
}
